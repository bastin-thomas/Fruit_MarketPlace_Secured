/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package be.hepl.java_c.client.GUI;

import be.hepl.java_c.client.Utils.MarketModel.Achats;
import be.hepl.java_c.client.Utils.MarketModel.Articles;
import be.hepl.java_c.client.Utils.MarketModel.CaddieRows;
import be.hepl.java_c.client.Utils.MarketModel.Protocol;
import java.awt.Image;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arkios
 */
public class Maraicher extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="My Properties">
    private final Protocol csocket;
    private final LoginPage login;
    private final String loginId;
    private int currentArticle;
    
    private ArrayList<CaddieRows> caddie;
    private float totalPrice;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Constructor">
    /**
     * Creates new form Maraicher
     *
     * @param csocket
     */
    public Maraicher(LoginPage parent, Protocol csocket, String LoginId) {
        initComponents();
        this.csocket = csocket;
        this.login = parent;
        this.loginId = LoginId;

        currentArticle = 0;
        this.GoRight_ButtonActionPerformed(null);
        
        caddie = new ArrayList<>();
        totalPrice = (float) 0.0;
        this.RefreshCaddie();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Methods">
    /*** 
     * Get the data of a specific article from Server and refresh the ui
     * @param index 
     */
    private void RefreshArticle(int index) throws Exception {
        Articles art = csocket.SendConsult(index);
        

        try {
            this.Image_Label.setText("");
            ImageIcon imageIcon = new ImageIcon("./images/" + art.getImage());
            Image tmp = imageIcon.getImage().getScaledInstance(400, 400, java.awt.Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(tmp);

            this.Image_Label.setIcon(imageIcon);
        } catch (Exception ex) {
            System.out.println("Cannot Load File here: " + "file:/images/" + art.getImage());
            this.Image_Label.setText("Cannot Find file: " + art.getImage());
        }

        this.Name_TextField.setText(art.getIntitule());
        this.UnitPrice_TextField.setText("" + art.getPrix());
        this.Stock_TextField.setText("" + art.getStock());
    }
    
    private void RefreshCaddie(){
        caddie.clear();
        
        //Refresh Caddie
        try{
            caddie = csocket.SendCaddie();
        }catch(Exception ex){
            switch (ex.getMessage()) {
                case "ENDCONNEXION":
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;
                    
                case "PARAMS_FORMAT_ERROR":
                    JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                    
                default:
                    JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
        
        //Set Caddie to model
        this.totalPrice = 0;
        DefaultTableModel dataModel = (DefaultTableModel) this.Caddie_Table.getModel();
        dataModel.setRowCount(0);
            
        //Recuperation des données et injection dans le modèle
        for(CaddieRows tmp : caddie){
            Vector<String> row = new Vector<>();
            row.add("" + tmp.getIntitule());
            row.add("" + tmp.getQuantitee());
            row.add("" + tmp.getPrix());
            
            totalPrice += tmp.getPrix() * ((float)tmp.getQuantitee());
            
            dataModel.addRow(row);
        }
        
        //Mise a jour du modèle avec les nouvelles information
        this.Caddie_Table.setModel(dataModel);
        
        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(2);
        this.Total_TextField.setText("" + df.format(totalPrice));
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Basket_Label = new javax.swing.JLabel();
        Shop_Label = new javax.swing.JLabel();
        Shop_Panel = new javax.swing.JPanel();
        Image_Label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Name_TextField = new javax.swing.JTextField();
        UnitPrice_TextField = new javax.swing.JTextField();
        Stock_TextField = new javax.swing.JTextField();
        Buy_Panel = new javax.swing.JPanel();
        GoLeft_Button = new javax.swing.JButton();
        GoRight_Button = new javax.swing.JButton();
        Quantity_Spinner = new javax.swing.JSpinner();
        Buy_Button = new javax.swing.JButton();
        Basket_Panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Caddie_Table = new javax.swing.JTable();
        Total_TextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Delete_Button = new javax.swing.JButton();
        Delete_All_Button = new javax.swing.JButton();
        Confirm_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Market");
        setMinimumSize(new java.awt.Dimension(1229, 544));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                OnWindowClosing(evt);
            }
        });

        Basket_Label.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Basket_Label.setText("BASKET :");

        Shop_Label.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Shop_Label.setText("SHOP:");

        Image_Label.setText("IMAGE FRUITs");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Name");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Unit Price");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Stock");

        Name_TextField.setText("FruitName");
        Name_TextField.setFocusable(false);

        UnitPrice_TextField.setText("5.5$");
        UnitPrice_TextField.setFocusable(false);

        Stock_TextField.setText("10");
        Stock_TextField.setFocusable(false);

        GoLeft_Button.setText("<<<<");
        GoLeft_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoLeft_ButtonActionPerformed(evt);
            }
        });

        GoRight_Button.setText(">>>>");
        GoRight_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoRight_ButtonActionPerformed(evt);
            }
        });

        Quantity_Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));

        Buy_Button.setText("ADD TO BASKET");
        Buy_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buy_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Buy_PanelLayout = new javax.swing.GroupLayout(Buy_Panel);
        Buy_Panel.setLayout(Buy_PanelLayout);
        Buy_PanelLayout.setHorizontalGroup(
            Buy_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Buy_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Buy_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Buy_PanelLayout.createSequentialGroup()
                        .addComponent(GoLeft_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(GoRight_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                    .addComponent(Quantity_Spinner)
                    .addComponent(Buy_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        Buy_PanelLayout.setVerticalGroup(
            Buy_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Buy_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Buy_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GoLeft_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GoRight_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Quantity_Spinner, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Buy_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout Shop_PanelLayout = new javax.swing.GroupLayout(Shop_Panel);
        Shop_Panel.setLayout(Shop_PanelLayout);
        Shop_PanelLayout.setHorizontalGroup(
            Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Shop_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Image_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Name_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UnitPrice_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Stock_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Shop_PanelLayout.createSequentialGroup()
                .addComponent(Buy_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Shop_PanelLayout.setVerticalGroup(
            Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Shop_PanelLayout.createSequentialGroup()
                .addGroup(Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Image_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Shop_PanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Name_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UnitPrice_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Shop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Stock_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(Buy_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        Caddie_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Quantity", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Caddie_Table.setRowSelectionAllowed(false);
        Caddie_Table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Caddie_Table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Caddie_Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(Caddie_Table);

        Total_TextField.setText("0");
        Total_TextField.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setText("Total:");

        Delete_Button.setText("Delete");
        Delete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_ButtonActionPerformed(evt);
            }
        });

        Delete_All_Button.setText("Delete All");
        Delete_All_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_All_ButtonActionPerformed(evt);
            }
        });

        Confirm_Button.setText("Confirm");
        Confirm_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Confirm_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Basket_PanelLayout = new javax.swing.GroupLayout(Basket_Panel);
        Basket_Panel.setLayout(Basket_PanelLayout);
        Basket_PanelLayout.setHorizontalGroup(
            Basket_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Basket_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(Basket_PanelLayout.createSequentialGroup()
                .addGap(433, 433, 433)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(Total_TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
            .addGroup(Basket_PanelLayout.createSequentialGroup()
                .addComponent(Delete_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Delete_All_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Confirm_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        Basket_PanelLayout.setVerticalGroup(
            Basket_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Basket_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Basket_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Total_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addGroup(Basket_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Delete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Confirm_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete_All_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Shop_Label)
                    .addComponent(Shop_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Basket_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Basket_Label))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Shop_Label)
                    .addComponent(Basket_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Shop_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Basket_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Events">
    private void GoRight_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoRight_ButtonActionPerformed
        //Reset EnableButton
        if(!this.GoLeft_Button.isEnabled())
        {
            this.GoLeft_Button.setEnabled(true);
        }
        
        try{
            RefreshArticle(currentArticle + 1);
            currentArticle++;
            
        } catch (Exception ex) {
            switch (ex.getMessage()) {
                case "ENDCONNEXION" -> {
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;
                }

                case "NO_ARTICLE_FOUND" -> //Do Nothing (maybe just disable the button)
                    this.GoRight_Button.setEnabled(false);

                case "PARAMS_FORMAT_ERROR" -> JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);

                default -> JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_GoRight_ButtonActionPerformed

    private void GoLeft_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoLeft_ButtonActionPerformed
        //Reset EnableButton
        if(!this.GoRight_Button.isEnabled())
        {
            this.GoRight_Button.setEnabled(true);
        }
        
        try{
            RefreshArticle(currentArticle - 1);
            currentArticle--;
            
        } catch (Exception ex) {
            switch (ex.getMessage()) {
                case "ENDCONNEXION" -> {
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;
                }

                case "NO_ARTICLE_FOUND" -> //Do Nothing (maybe just disable the button)
                    this.GoLeft_Button.setEnabled(false);

                case "PARAMS_FORMAT_ERROR" -> JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);

                default -> JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_GoLeft_ButtonActionPerformed

    private void Buy_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buy_ButtonActionPerformed
        //Check if integer
        SpinnerModel model = this.Quantity_Spinner.getModel();
        if(!(model.getValue() instanceof Integer))
        {
            System.out.println("Quantity Spinner not an integer");
            return;  
        }
        
        //if int send request        
        try{
            Achats achat = csocket.SendAchat(this.currentArticle, (int) model.getValue());
        } catch(Exception ex){            
            switch (ex.getMessage()) {
                case "ENDCONNEXION" -> {
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;
                }

                case "PARAMS_FORMAT_ERROR" -> JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);
                    
                case "NO_MORE_STOCK" -> JOptionPane.showMessageDialog(this, "Can't get more in your basket. Because there is no such stock", "No More Stock", JOptionPane.WARNING_MESSAGE);
                    
                default -> JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        try{
            RefreshArticle(currentArticle);
        } catch (Exception ex) {
            switch (ex.getMessage()) {
                case "ENDCONNEXION":
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;

                case "PARAMS_FORMAT_ERROR":
                    JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                    
                case "NO_ARTICLE_FOUND":
                default:
                    JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
        
        RefreshCaddie();
    }//GEN-LAST:event_Buy_ButtonActionPerformed

    
    
    private void OnWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_OnWindowClosing
        try {
            csocket.SendCancelAll();
            csocket.SendLogout();
            csocket.Close();
        } catch (Exception ex) {
            Logger.getLogger(Maraicher.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
            
        //Going Back to LoginPage
        this.setVisible(false);
        this.login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OnWindowClosing

    
    
    
    private void Delete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_ButtonActionPerformed
        try{
            int index = this.Caddie_Table.getSelectedRow();
            int idArticle = caddie.get(index).getIdArticle();
            csocket.SendCancel(idArticle);
        } catch (Exception ex) {
            switch(ex.getMessage()) {
                case "ENDCONNEXION" -> {
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;
                }

                case "PARAMS_FORMAT_ERROR" -> JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);
                    
                default -> JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        try {
            RefreshCaddie();
            RefreshArticle(currentArticle);
        } catch (Exception ex) {
            Logger.getLogger(Maraicher.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Delete_ButtonActionPerformed

    private void Delete_All_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_All_ButtonActionPerformed
        try {
            csocket.SendCancelAll();
        } catch (Exception ex) {
            switch(ex.getMessage()) {
                case "ENDCONNEXION" -> {
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;
                }

                case "PARAMS_FORMAT_ERROR" -> JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);
                    
                default -> JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        try {
            RefreshCaddie();
            RefreshArticle(currentArticle);
        } catch (Exception ex) {
            Logger.getLogger(Maraicher.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Delete_All_ButtonActionPerformed

    private void Confirm_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Confirm_ButtonActionPerformed
        try{
            csocket.SendConfirmer(loginId);
        }
        catch(Exception ex){
            switch(ex.getMessage()) {
                case "ENDCONNEXION" -> {
                    JOptionPane.showMessageDialog(this, "Connexion Error during transmission of Data", "Error", JOptionPane.ERROR_MESSAGE);
                    this.OnWindowClosing(null);
                    return;
                }

                case "PARAMS_FORMAT_ERROR" -> JOptionPane.showMessageDialog(this, "The format received was not intended", "Error", JOptionPane.ERROR_MESSAGE);
                    
                case "ERROR_BILL" -> JOptionPane.showMessageDialog(this, "The Bill cannot be created due to Server issues", "Error", JOptionPane.ERROR_MESSAGE);
                    
                default -> JOptionPane.showMessageDialog(this, "Unkown Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        JOptionPane.showMessageDialog(this, "La commande a bien été enregistrée.", "Success", JOptionPane.INFORMATION_MESSAGE);
        RefreshCaddie();
    }//GEN-LAST:event_Confirm_ButtonActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Generated Properties">    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Basket_Label;
    private javax.swing.JPanel Basket_Panel;
    private javax.swing.JButton Buy_Button;
    private javax.swing.JPanel Buy_Panel;
    private javax.swing.JTable Caddie_Table;
    private javax.swing.JButton Confirm_Button;
    private javax.swing.JButton Delete_All_Button;
    private javax.swing.JButton Delete_Button;
    private javax.swing.JButton GoLeft_Button;
    private javax.swing.JButton GoRight_Button;
    private javax.swing.JLabel Image_Label;
    private javax.swing.JTextField Name_TextField;
    private javax.swing.JSpinner Quantity_Spinner;
    private javax.swing.JLabel Shop_Label;
    private javax.swing.JPanel Shop_Panel;
    private javax.swing.JTextField Stock_TextField;
    private javax.swing.JTextField Total_TextField;
    private javax.swing.JTextField UnitPrice_TextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
